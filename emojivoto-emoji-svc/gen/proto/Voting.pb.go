// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/Voting.proto

package emojivoto_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VotingResult struct {
	Shortcode            string   `protobuf:"bytes,1,opt,name=Shortcode,proto3" json:"Shortcode,omitempty"`
	Votes                int32    `protobuf:"varint,2,opt,name=Votes,proto3" json:"Votes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VotingResult) Reset()         { *m = VotingResult{} }
func (m *VotingResult) String() string { return proto.CompactTextString(m) }
func (*VotingResult) ProtoMessage()    {}
func (*VotingResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa66b26907aec595, []int{0}
}

func (m *VotingResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VotingResult.Unmarshal(m, b)
}
func (m *VotingResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VotingResult.Marshal(b, m, deterministic)
}
func (m *VotingResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VotingResult.Merge(m, src)
}
func (m *VotingResult) XXX_Size() int {
	return xxx_messageInfo_VotingResult.Size(m)
}
func (m *VotingResult) XXX_DiscardUnknown() {
	xxx_messageInfo_VotingResult.DiscardUnknown(m)
}

var xxx_messageInfo_VotingResult proto.InternalMessageInfo

func (m *VotingResult) GetShortcode() string {
	if m != nil {
		return m.Shortcode
	}
	return ""
}

func (m *VotingResult) GetVotes() int32 {
	if m != nil {
		return m.Votes
	}
	return 0
}

type VoteRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteRequest) Reset()         { *m = VoteRequest{} }
func (m *VoteRequest) String() string { return proto.CompactTextString(m) }
func (*VoteRequest) ProtoMessage()    {}
func (*VoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa66b26907aec595, []int{1}
}

func (m *VoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoteRequest.Unmarshal(m, b)
}
func (m *VoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoteRequest.Marshal(b, m, deterministic)
}
func (m *VoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteRequest.Merge(m, src)
}
func (m *VoteRequest) XXX_Size() int {
	return xxx_messageInfo_VoteRequest.Size(m)
}
func (m *VoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VoteRequest proto.InternalMessageInfo

type VoteResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteResponse) Reset()         { *m = VoteResponse{} }
func (m *VoteResponse) String() string { return proto.CompactTextString(m) }
func (*VoteResponse) ProtoMessage()    {}
func (*VoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa66b26907aec595, []int{2}
}

func (m *VoteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoteResponse.Unmarshal(m, b)
}
func (m *VoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoteResponse.Marshal(b, m, deterministic)
}
func (m *VoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteResponse.Merge(m, src)
}
func (m *VoteResponse) XXX_Size() int {
	return xxx_messageInfo_VoteResponse.Size(m)
}
func (m *VoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VoteResponse proto.InternalMessageInfo

type ResultsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResultsRequest) Reset()         { *m = ResultsRequest{} }
func (m *ResultsRequest) String() string { return proto.CompactTextString(m) }
func (*ResultsRequest) ProtoMessage()    {}
func (*ResultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa66b26907aec595, []int{3}
}

func (m *ResultsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultsRequest.Unmarshal(m, b)
}
func (m *ResultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultsRequest.Marshal(b, m, deterministic)
}
func (m *ResultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultsRequest.Merge(m, src)
}
func (m *ResultsRequest) XXX_Size() int {
	return xxx_messageInfo_ResultsRequest.Size(m)
}
func (m *ResultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResultsRequest proto.InternalMessageInfo

type ResultsResponse struct {
	Results              []*VotingResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResultsResponse) Reset()         { *m = ResultsResponse{} }
func (m *ResultsResponse) String() string { return proto.CompactTextString(m) }
func (*ResultsResponse) ProtoMessage()    {}
func (*ResultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa66b26907aec595, []int{4}
}

func (m *ResultsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultsResponse.Unmarshal(m, b)
}
func (m *ResultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultsResponse.Marshal(b, m, deterministic)
}
func (m *ResultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultsResponse.Merge(m, src)
}
func (m *ResultsResponse) XXX_Size() int {
	return xxx_messageInfo_ResultsResponse.Size(m)
}
func (m *ResultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResultsResponse proto.InternalMessageInfo

func (m *ResultsResponse) GetResults() []*VotingResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*VotingResult)(nil), "emojivoto.v1.VotingResult")
	proto.RegisterType((*VoteRequest)(nil), "emojivoto.v1.VoteRequest")
	proto.RegisterType((*VoteResponse)(nil), "emojivoto.v1.VoteResponse")
	proto.RegisterType((*ResultsRequest)(nil), "emojivoto.v1.ResultsRequest")
	proto.RegisterType((*ResultsResponse)(nil), "emojivoto.v1.ResultsResponse")
}

func init() {
	proto.RegisterFile("proto/Voting.proto", fileDescriptor_fa66b26907aec595)
}

var fileDescriptor_fa66b26907aec595 = []byte{
	// 1101 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x59, 0x4d, 0x73, 0x1b, 0x45,
	0x10, 0xad, 0x40, 0x85, 0x90, 0x49, 0xe2, 0x04, 0x91, 0x82, 0xc4, 0x65, 0xaa, 0x28, 0x9f, 0x72,
	0x32, 0x89, 0xe1, 0xc0, 0x91, 0x68, 0x65, 0xc9, 0x36, 0x96, 0xad, 0x92, 0x64, 0xeb, 0x3c, 0xda,
	0x6d, 0x76, 0x87, 0x1d, 0x4d, 0x2f, 0xf3, 0x61, 0x47, 0xf9, 0xa5, 0xfc, 0x1c, 0x7a, 0x77, 0x47,
	0x90, 0x14, 0x70, 0x99, 0xce, 0x4d, 0xb3, 0xbb, 0xf5, 0xd4, 0xd3, 0x1f, 0xaf, 0x5f, 0xcf, 0x88,
	0x41, 0x63, 0xd1, 0xe3, 0x0f, 0x37, 0xe8, 0x95, 0x29, 0x8f, 0xba, 0xc5, 0xe0, 0x31, 0x6c, 0xf0,
	0x77, 0x75, 0x4b, 0x3f, 0x8f, 0x6e, 0xdf, 0x1c, 0x0e, 0xc5, 0xe3, 0xfe, 0xed, 0x1c, 0x5c, 0xd0,
	0x7e, 0x70, 0x20, 0x1e, 0x2e, 0x2a, 0xb4, 0x3e, 0xc7, 0x02, 0x5e, 0xdc, 0xfb, 0xfe, 0xde, 0xab,
	0x87, 0xf3, 0x7f, 0x1e, 0x0c, 0x9e, 0x8b, 0xfb, 0xf4, 0x35, 0xb8, 0x17, 0x9f, 0xd1, 0x9b, 0xfb,
	0xf3, 0x7e, 0x71, 0xf8, 0x44, 0x3c, 0x6a, 0x7f, 0xcc, 0xe1, 0x8f, 0x00, 0xce, 0x1f, 0xee, 0x75,
	0x90, 0xb4, 0x74, 0x0d, 0x1a, 0x07, 0x87, 0xcf, 0xc4, 0x5e, 0x0f, 0xee, 0x76, 0x5f, 0x4c, 0xc4,
	0xd3, 0xbf, 0x9f, 0xf4, 0x1f, 0x0d, 0x7e, 0x12, 0x0f, 0x6c, 0xff, 0x88, 0xfe, 0xf5, 0xf3, 0x57,
	0x8f, 0x8e, 0xf7, 0x8f, 0x3e, 0xb4, 0xf3, 0xe8, 0x43, 0x23, 0xe7, 0xbb, 0x4f, 0x8f, 0xff, 0xfc,
	0x59, 0x3c, 0xe9, 0xdf, 0x2c, 0xc0, 0xde, 0xaa, 0x1c, 0x06, 0x6f, 0xc5, 0x97, 0xed, 0x9f, 0xcf,
	0x10, 0x9b, 0xc1, 0xcb, 0x7f, 0x41, 0xec, 0x6c, 0xdc, 0xdf, 0xff, 0xaf, 0x57, 0xd1, 0x94, 0x5f,
	0xc4, 0x83, 0x76, 0x7d, 0x8e, 0xdb, 0x54, 0x84, 0x89, 0xd8, 0x6b, 0xd7, 0x8b, 0x60, 0x4a, 0x2d,
	0x9d, 0x03, 0x97, 0x0a, 0x34, 0xda, 0x79, 0x56, 0xcb, 0x77, 0x50, 0xa4, 0xa2, 0x5c, 0x8b, 0x83,
	0xce, 0x1c, 0x1f, 0xf2, 0xfa, 0x2a, 0xf8, 0x25, 0x9a, 0x32, 0xc0, 0x4a, 0x99, 0x9a, 0xfc, 0x76,
	0xb2, 0x85, 0x54, 0xd8, 0x5f, 0xc5, 0xa0, 0x5d, 0x4f, 0xd1, 0xc0, 0x76, 0x8a, 0xc1, 0x57, 0x63,
	0x99, 0x03, 0x73, 0xa7, 0x63, 0x1d, 0x5c, 0x95, 0xbe, 0xd3, 0x18, 0xfd, 0xa9, 0x74, 0x75, 0x2a,
	0xc4, 0x49, 0x9f, 0xbd, 0x97, 0x60, 0x0b, 0xce, 0x7e, 0x86, 0xe2, 0x61, 0xbb, 0x9e, 0x54, 0xe8,
	0x7c, 0x2a, 0xc6, 0x95, 0xf8, 0xa6, 0x8b, 0x5b, 0x1d, 0xb4, 0x7e, 0x6b, 0x8a, 0xcc, 0xa2, 0x73,
	0x6b, 0xf2, 0x76, 0x72, 0x3a, 0x9d, 0x89, 0x67, 0xed, 0xfa, 0x14, 0xa4, 0xf5, 0x14, 0x78, 0x97,
	0x49, 0xcf, 0x4c, 0xf1, 0x16, 0xea, 0x12, 0x4f, 0x6e, 0x95, 0x4e, 0x05, 0x1a, 0x77, 0x15, 0x0c,
	0x0b, 0x00, 0x1e, 0xce, 0xa9, 0x78, 0xda, 0xe1, 0x34, 0x20, 0x6b, 0x1e, 0x52, 0xac, 0xff, 0x61,
	0x7a, 0xfd, 0xc7, 0x34, 0x9c, 0x28, 0xcb, 0x35, 0x62, 0x2a, 0x0d, 0x33, 0x03, 0x57, 0xb8, 0x49,
	0xc7, 0x88, 0xc5, 0x70, 0xa5, 0x0b, 0xb0, 0x0c, 0x53, 0x62, 0x8c, 0x67, 0xa8, 0x89, 0xa2, 0x37,
	0x6c, 0x9c, 0x49, 0x90, 0xb6, 0x70, 0x0c, 0x9c, 0xb9, 0x78, 0xd9, 0xae, 0x33, 0x5a, 0x78, 0x1b,
	0x72, 0xaf, 0xd0, 0xac, 0xd0, 0xd6, 0xac, 0x3d, 0x66, 0x42, 0x74, 0x7b, 0xb4, 0xca, 0xa4, 0xb3,
	0x46, 0xf4, 0x77, 0x0f, 0xe2, 0x1c, 0xb3, 0x16, 0x68, 0x37, 0x67, 0x66, 0x19, 0xa8, 0x73, 0x60,
	0x2a, 0xd2, 0xb9, 0xf8, 0xaa, 0xab, 0x05, 0xab, 0x0a, 0xea, 0x18, 0xbe, 0xba, 0x81, 0xf4, 0xba,
	0x8a, 0x9b, 0x9b, 0x5a, 0x97, 0x69, 0x19, 0x1c, 0x33, 0xaf, 0x17, 0xd2, 0x78, 0xc9, 0x0c, 0xd6,
	0x32, 0x50, 0xd0, 0xb7, 0x4c, 0x90, 0xb9, 0x5c, 0xaf, 0x95, 0x67, 0x86, 0xea, 0x12, 0x27, 0x88,
	0x05, 0xab, 0x56, 0x63, 0x07, 0xbd, 0xaa, 0x59, 0x28, 0x53, 0xf1, 0xbc, 0xdf, 0x94, 0x72, 0xa4,
	0x0e, 0x4e, 0xa5, 0xe1, 0x19, 0x15, 0x2b, 0x76, 0x88, 0x77, 0x84, 0xc6, 0xa8, 0xae, 0x9d, 0xd6,
	0x90, 0xa6, 0x6d, 0xca, 0x8d, 0xd4, 0x1b, 0xc2, 0x63, 0x82, 0x75, 0x1b, 0x5b, 0x54, 0x36, 0x94,
	0x25, 0x03, 0x2c, 0xf6, 0x54, 0x92, 0x1c, 0x4e, 0x96, 0x3c, 0xb6, 0x8d, 0x3d, 0x75, 0x25, 0x75,
	0xcd, 0xf3, 0x56, 0x04, 0x9a, 0x07, 0x63, 0x78, 0x40, 0x31, 0xc5, 0x47, 0x92, 0xe8, 0xc8, 0x32,
	0xad, 0x21, 0x33, 0x5a, 0x1c, 0xbe, 0xab, 0x23, 0x0a, 0xb9, 0x1a, 0xb8, 0xc5, 0x42, 0x69, 0x6e,
	0xd6, 0x78, 0xc7, 0xa5, 0xa2, 0x5a, 0xb1, 0xbd, 0x33, 0x41, 0xfd, 0xdb, 0x27, 0x09, 0xfa, 0x22,
	0x58, 0x26, 0xd0, 0x8e, 0xf3, 0x49, 0x44, 0x83, 0x5f, 0x4b, 0xad, 0xf9, 0x9d, 0x7f, 0xa8, 0x98,
	0x19, 0xbd, 0x6b, 0x8c, 0xa8, 0x8c, 0xbf, 0x6e, 0x8e, 0x99, 0x19, 0x74, 0x13, 0x74, 0x4e, 0xa5,
	0x2f, 0x75, 0xf0, 0x5c, 0x81, 0x3f, 0x05, 0x2f, 0x35, 0x33, 0x64, 0x59, 0xeb, 0x63, 0x68, 0xb9,
	0x96, 0xe9, 0x9e, 0x65, 0x15, 0x36, 0x6b, 0x17, 0x1a, 0xa6, 0x6e, 0x5d, 0xc9, 0x5b, 0x60, 0x42,
	0x50, 0x87, 0x6f, 0x98, 0x2d, 0xb1, 0x6d, 0x41, 0x50, 0xb4, 0x5e, 0x71, 0x4c, 0x63, 0x66, 0x56,
	0x6e, 0x99, 0x3a, 0x7c, 0x84, 0x25, 0xd7, 0x23, 0xd2, 0x1f, 0x33, 0x8d, 0x98, 0xa9, 0x92, 0x59,
	0xd3, 0xa7, 0xd2, 0xe7, 0x15, 0x55, 0x62, 0x56, 0xa9, 0xbc, 0xe6, 0xb2, 0x9e, 0x91, 0xe9, 0x5a,
	0x30, 0x62, 0x0c, 0x65, 0x8e, 0xdc, 0x01, 0x67, 0xa6, 0xde, 0xbf, 0x97, 0xcc, 0xe0, 0x2c, 0xc9,
	0x0e, 0x66, 0x2b, 0x19, 0x06, 0x6b, 0x95, 0x47, 0xe6, 0x66, 0xe6, 0x92, 0xd1, 0xd4, 0x22, 0x0b,
	0x8c, 0x30, 0x94, 0x95, 0x09, 0x9e, 0xc9, 0xd9, 0x59, 0x25, 0x37, 0x8d, 0x2c, 0x0d, 0x30, 0x73,
	0x6e, 0x69, 0xb1, 0x51, 0xb9, 0xd4, 0x23, 0x1a, 0x6a, 0x6a, 0x66, 0x9c, 0x86, 0x90, 0xde, 0x68,
	0x23, 0xf7, 0x2f, 0x89, 0x22, 0x35, 0xd8, 0x49, 0x7b, 0x30, 0xc7, 0x74, 0x34, 0xcd, 0x8c, 0xba,
	0x98, 0xa6, 0x13, 0xdd, 0xae, 0xd1, 0x82, 0xcc, 0xab, 0xeb, 0xcd, 0xda, 0x82, 0xd6, 0x92, 0x2b,
	0x43, 0x31, 0xd0, 0x58, 0xa4, 0xcc, 0xc2, 0xa4, 0xab, 0x9a, 0x98, 0xd0, 0x19, 0x85, 0x9f, 0x21,
	0xd6, 0x2e, 0xc4, 0xd7, 0xfd, 0xa1, 0x23, 0xc8, 0xcd, 0x05, 0xe6, 0xb8, 0x41, 0xaf, 0xd2, 0xdb,
	0x4a, 0x44, 0x1b, 0x6b, 0x55, 0x56, 0x7e, 0x44, 0x03, 0x80, 0xf5, 0xc1, 0x02, 0x77, 0x72, 0xc3,
	0x9c, 0x14, 0x0e, 0x97, 0x06, 0xbd, 0xb4, 0xc9, 0xc4, 0x3e, 0x13, 0xdf, 0xc6, 0x83, 0xe2, 0x21,
	0x10, 0x2f, 0x17, 0x8b, 0x0d, 0x49, 0x81, 0x4c, 0x63, 0x28, 0x98, 0x39, 0xd5, 0x61, 0xb4, 0x03,
	0x7b, 0xab, 0x70, 0x99, 0x45, 0x37, 0x56, 0xe9, 0x9e, 0x8e, 0x69, 0x79, 0x2e, 0xf3, 0xfa, 0xea,
	0x82, 0x26, 0x76, 0xb0, 0x5c, 0xc9, 0x3e, 0x24, 0x0f, 0x21, 0x1a, 0x36, 0xe1, 0x17, 0xec, 0xc3,
	0x03, 0xe2, 0xb5, 0x8a, 0x7b, 0x78, 0x70, 0xd6, 0x54, 0x68, 0xb8, 0x1a, 0x74, 0x46, 0x83, 0xa7,
	0x65, 0x6a, 0x8b, 0xb1, 0x7c, 0xc7, 0xe5, 0xe6, 0xa0, 0xd7, 0x9f, 0xe2, 0x2a, 0xa1, 0xcd, 0xda,
	0x15, 0x11, 0x0f, 0xf7, 0xf4, 0x2b, 0xb3, 0x5b, 0x47, 0xda, 0xbc, 0xcd, 0x17, 0x26, 0xcf, 0x5f,
	0x9b, 0x02, 0x2c, 0xf9, 0x98, 0x69, 0xd0, 0x59, 0x9b, 0xfe, 0x16, 0xd7, 0x32, 0x9d, 0x54, 0x63,
	0xb0, 0xde, 0xbc, 0x7e, 0xcd, 0xe5, 0x87, 0x0a, 0x88, 0xfb, 0x2c, 0x14, 0x63, 0x2d, 0xb9, 0xa2,
	0xb2, 0xbb, 0x97, 0x80, 0x62, 0x71, 0x87, 0x36, 0x5d, 0xaa, 0xc7, 0x51, 0x68, 0xac, 0xb1, 0x69,
	0xb6, 0x23, 0x95, 0x7e, 0x7f, 0x33, 0x16, 0x0f, 0xe2, 0xdd, 0xe2, 0xe0, 0xe0, 0xe3, 0xcf, 0x3e,
	0xbe, 0x84, 0xdc, 0xff, 0xee, 0x7f, 0xde, 0xf6, 0x38, 0xeb, 0x2f, 0xba, 0xdb, 0xd2, 0x1f, 0xff,
	0x0a, 0x00, 0x00, 0xff, 0xff, 0x1f, 0xb8, 0xec, 0xc6, 0x43, 0x1d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VotingServiceClient is the client API for VotingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VotingServiceClient interface {
	VotePoop(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteJoy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSunglasses(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRelaxed(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteStuckOutTongueWinkingEye(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMoneyMouthFace(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteFlushed(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMask(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteNerdFace(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteGhost(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSkullAndCrossbones(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteHeartEyesCat(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteHearNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSeeNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSpeakNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBoy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteGirl(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteOlderMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePoliceman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteGuardsman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteConstructionWorkerMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePrince(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePrincess(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteManInTuxedo(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBrideWithVeil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMrsClaus(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSanta(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTurkey(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRabbit(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteNoGoodWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteOkWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRaisingHandWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBowingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteManFacepalming(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteWomanShrugging(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMassageWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteWalkingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRunningMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteDancer(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteManDancing(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteDancingWomen(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRainbow(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSkier(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteGolfingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSurfingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBasketballMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBikingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePointUp2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteVulcanSalute(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMetal(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCallMeHand(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteThumbsup(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteWave(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteClap(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRaisedHands(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePray(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteDog(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCat2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePig(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteHatchingChick(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSnail(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBacon(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePizza(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTaco(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBurrito(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRamen(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteDoughnut(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteChampagne(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTropicalDrink(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBeer(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTumblerGlass(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteWorldMap(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBeachUmbrella(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMountainSnow(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCamping(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSteamLocomotive(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteFlightDeparture(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRocket(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteStar2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSunBehindSmallCloud(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCloudWithRain(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteFire(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteJackOLantern(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBalloon(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTada(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTrophy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteIphone(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePager(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteFax(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBulb(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMoneyWithWings(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCrystalBall(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteUnderage(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteInterrobang(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	Vote100(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCheckeredFlag(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCrossedSwords(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteFloppyDisk(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	Results(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error)
}

type votingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVotingServiceClient(cc grpc.ClientConnInterface) VotingServiceClient {
	return &votingServiceClient{cc}
}

func (c *votingServiceClient) VotePoop(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePoop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteJoy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteJoy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSunglasses(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSunglasses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRelaxed(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRelaxed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteStuckOutTongueWinkingEye(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteStuckOutTongueWinkingEye", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMoneyMouthFace(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMoneyMouthFace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteFlushed(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteFlushed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMask(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteNerdFace(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteNerdFace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteGhost(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteGhost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSkullAndCrossbones(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSkullAndCrossbones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteHeartEyesCat(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteHeartEyesCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteHearNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteHearNoEvil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSeeNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSeeNoEvil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSpeakNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSpeakNoEvil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBoy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBoy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteGirl(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteGirl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteWoman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteOlderMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteOlderMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePoliceman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePoliceman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteGuardsman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteGuardsman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteConstructionWorkerMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteConstructionWorkerMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePrince(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePrince", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePrincess(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePrincess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteManInTuxedo(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteManInTuxedo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBrideWithVeil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBrideWithVeil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMrsClaus(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMrsClaus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSanta(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSanta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTurkey(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTurkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRabbit(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRabbit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteNoGoodWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteNoGoodWoman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteOkWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteOkWoman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRaisingHandWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRaisingHandWoman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBowingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBowingMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteManFacepalming(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteManFacepalming", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteWomanShrugging(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteWomanShrugging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMassageWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMassageWoman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteWalkingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteWalkingMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRunningMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRunningMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteDancer(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteDancer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteManDancing(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteManDancing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteDancingWomen(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteDancingWomen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRainbow(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRainbow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSkier(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSkier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteGolfingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteGolfingMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSurfingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSurfingMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBasketballMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBasketballMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBikingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBikingMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePointUp2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePointUp2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteVulcanSalute(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteVulcanSalute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMetal(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMetal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCallMeHand(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCallMeHand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteThumbsup(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteThumbsup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteWave(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteWave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteClap(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteClap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRaisedHands(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRaisedHands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePray(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteDog(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteDog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCat2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCat2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePig(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteHatchingChick(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteHatchingChick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSnail(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSnail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBacon(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBacon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePizza(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePizza", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTaco(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTaco", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBurrito(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBurrito", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRamen(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRamen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteDoughnut(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteDoughnut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteChampagne(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteChampagne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTropicalDrink(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTropicalDrink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBeer(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTumblerGlass(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTumblerGlass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteWorldMap(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteWorldMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBeachUmbrella(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBeachUmbrella", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMountainSnow(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMountainSnow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCamping(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCamping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSteamLocomotive(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSteamLocomotive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteFlightDeparture(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteFlightDeparture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRocket(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRocket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteStar2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteStar2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSunBehindSmallCloud(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSunBehindSmallCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCloudWithRain(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCloudWithRain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteFire(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteFire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteJackOLantern(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteJackOLantern", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBalloon(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBalloon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTada(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTada", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTrophy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTrophy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteIphone(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteIphone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePager(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteFax(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteFax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBulb(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBulb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMoneyWithWings(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMoneyWithWings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCrystalBall(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCrystalBall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteUnderage(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteUnderage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteInterrobang(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteInterrobang", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) Vote100(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/Vote100", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCheckeredFlag(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCheckeredFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCrossedSwords(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCrossedSwords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteFloppyDisk(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteFloppyDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) Results(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error) {
	out := new(ResultsResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/Results", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VotingServiceServer is the server API for VotingService service.
type VotingServiceServer interface {
	VotePoop(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteJoy(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSunglasses(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRelaxed(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteStuckOutTongueWinkingEye(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMoneyMouthFace(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteFlushed(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMask(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteNerdFace(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteGhost(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSkullAndCrossbones(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteHeartEyesCat(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteHearNoEvil(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSeeNoEvil(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSpeakNoEvil(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBoy(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteGirl(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteWoman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteOlderMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePoliceman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteGuardsman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteConstructionWorkerMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePrince(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePrincess(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteManInTuxedo(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBrideWithVeil(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMrsClaus(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSanta(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTurkey(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRabbit(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteNoGoodWoman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteOkWoman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRaisingHandWoman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBowingMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteManFacepalming(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteWomanShrugging(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMassageWoman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteWalkingMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRunningMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteDancer(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteManDancing(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteDancingWomen(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRainbow(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSkier(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteGolfingMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSurfingMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBasketballMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBikingMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePointUp2(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteVulcanSalute(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMetal(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCallMeHand(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteThumbsup(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteWave(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteClap(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRaisedHands(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePray(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteDog(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCat2(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePig(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteHatchingChick(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSnail(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBacon(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePizza(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTaco(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBurrito(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRamen(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteDoughnut(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteChampagne(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTropicalDrink(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBeer(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTumblerGlass(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteWorldMap(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBeachUmbrella(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMountainSnow(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCamping(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSteamLocomotive(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteFlightDeparture(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRocket(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteStar2(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSunBehindSmallCloud(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCloudWithRain(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteFire(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteJackOLantern(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBalloon(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTada(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTrophy(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteIphone(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePager(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteFax(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBulb(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMoneyWithWings(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCrystalBall(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteUnderage(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteInterrobang(context.Context, *VoteRequest) (*VoteResponse, error)
	Vote100(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCheckeredFlag(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCrossedSwords(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteFloppyDisk(context.Context, *VoteRequest) (*VoteResponse, error)
	Results(context.Context, *ResultsRequest) (*ResultsResponse, error)
}

// UnimplementedVotingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVotingServiceServer struct {
}

func (*UnimplementedVotingServiceServer) VotePoop(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePoop not implemented")
}
func (*UnimplementedVotingServiceServer) VoteJoy(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteJoy not implemented")
}
func (*UnimplementedVotingServiceServer) VoteSunglasses(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSunglasses not implemented")
}
func (*UnimplementedVotingServiceServer) VoteRelaxed(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRelaxed not implemented")
}
func (*UnimplementedVotingServiceServer) VoteStuckOutTongueWinkingEye(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteStuckOutTongueWinkingEye not implemented")
}
func (*UnimplementedVotingServiceServer) VoteMoneyMouthFace(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMoneyMouthFace not implemented")
}
func (*UnimplementedVotingServiceServer) VoteFlushed(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteFlushed not implemented")
}
func (*UnimplementedVotingServiceServer) VoteMask(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMask not implemented")
}
func (*UnimplementedVotingServiceServer) VoteNerdFace(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteNerdFace not implemented")
}
func (*UnimplementedVotingServiceServer) VoteGhost(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteGhost not implemented")
}
func (*UnimplementedVotingServiceServer) VoteSkullAndCrossbones(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSkullAndCrossbones not implemented")
}
func (*UnimplementedVotingServiceServer) VoteHeartEyesCat(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteHeartEyesCat not implemented")
}
func (*UnimplementedVotingServiceServer) VoteHearNoEvil(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteHearNoEvil not implemented")
}
func (*UnimplementedVotingServiceServer) VoteSeeNoEvil(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSeeNoEvil not implemented")
}
func (*UnimplementedVotingServiceServer) VoteSpeakNoEvil(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSpeakNoEvil not implemented")
}
func (*UnimplementedVotingServiceServer) VoteBoy(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBoy not implemented")
}
func (*UnimplementedVotingServiceServer) VoteGirl(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteGirl not implemented")
}
func (*UnimplementedVotingServiceServer) VoteMan(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMan not implemented")
}
func (*UnimplementedVotingServiceServer) VoteWoman(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWoman not implemented")
}
func (*UnimplementedVotingServiceServer) VoteOlderMan(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteOlderMan not implemented")
}
func (*UnimplementedVotingServiceServer) VotePoliceman(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePoliceman not implemented")
}
func (*UnimplementedVotingServiceServer) VoteGuardsman(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteGuardsman not implemented")
}
func (*UnimplementedVotingServiceServer) VoteConstructionWorkerMan(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteConstructionWorkerMan not implemented")
}
func (*UnimplementedVotingServiceServer) VotePrince(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePrince not implemented")
}
func (*UnimplementedVotingServiceServer) VotePrincess(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePrincess not implemented")
}
func (*UnimplementedVotingServiceServer) VoteManInTuxedo(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteManInTuxedo not implemented")
}
func (*UnimplementedVotingServiceServer) VoteBrideWithVeil(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBrideWithVeil not implemented")
}
func (*UnimplementedVotingServiceServer) VoteMrsClaus(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMrsClaus not implemented")
}
func (*UnimplementedVotingServiceServer) VoteSanta(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSanta not implemented")
}
func (*UnimplementedVotingServiceServer) VoteTurkey(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteTurkey not implemented")
}
func (*UnimplementedVotingServiceServer) VoteRabbit(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRabbit not implemented")
}
func (*UnimplementedVotingServiceServer) VoteNoGoodWoman(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteNoGoodWoman not implemented")
}
func (*UnimplementedVotingServiceServer) VoteOkWoman(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteOkWoman not implemented")
}
func (*UnimplementedVotingServiceServer) VoteRaisingHandWoman(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRaisingHandWoman not implemented")
}
func (*UnimplementedVotingServiceServer) VoteBowingMan(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBowingMan not implemented")
}
func (*UnimplementedVotingServiceServer) VoteManFacepalming(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteManFacepalming not implemented")
}
func (*UnimplementedVotingServiceServer) VoteWomanShrugging(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWomanShrugging not implemented")
}
func (*UnimplementedVotingServiceServer) VoteMassageWoman(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMassageWoman not implemented")
}
func (*UnimplementedVotingServiceServer) VoteWalkingMan(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWalkingMan not implemented")
}
func (*UnimplementedVotingServiceServer) VoteRunningMan(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRunningMan not implemented")
}
func (*UnimplementedVotingServiceServer) VoteDancer(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteDancer not implemented")
}
func (*UnimplementedVotingServiceServer) VoteManDancing(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteManDancing not implemented")
}
func (*UnimplementedVotingServiceServer) VoteDancingWomen(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteDancingWomen not implemented")
}
func (*UnimplementedVotingServiceServer) VoteRainbow(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRainbow not implemented")
}
func (*UnimplementedVotingServiceServer) VoteSkier(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSkier not implemented")
}
func (*UnimplementedVotingServiceServer) VoteGolfingMan(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteGolfingMan not implemented")
}
func (*UnimplementedVotingServiceServer) VoteSurfingMan(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSurfingMan not implemented")
}
func (*UnimplementedVotingServiceServer) VoteBasketballMan(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBasketballMan not implemented")
}
func (*UnimplementedVotingServiceServer) VoteBikingMan(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBikingMan not implemented")
}
func (*UnimplementedVotingServiceServer) VotePointUp2(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePointUp2 not implemented")
}
func (*UnimplementedVotingServiceServer) VoteVulcanSalute(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteVulcanSalute not implemented")
}
func (*UnimplementedVotingServiceServer) VoteMetal(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMetal not implemented")
}
func (*UnimplementedVotingServiceServer) VoteCallMeHand(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCallMeHand not implemented")
}
func (*UnimplementedVotingServiceServer) VoteThumbsup(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteThumbsup not implemented")
}
func (*UnimplementedVotingServiceServer) VoteWave(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWave not implemented")
}
func (*UnimplementedVotingServiceServer) VoteClap(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteClap not implemented")
}
func (*UnimplementedVotingServiceServer) VoteRaisedHands(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRaisedHands not implemented")
}
func (*UnimplementedVotingServiceServer) VotePray(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePray not implemented")
}
func (*UnimplementedVotingServiceServer) VoteDog(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteDog not implemented")
}
func (*UnimplementedVotingServiceServer) VoteCat2(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCat2 not implemented")
}
func (*UnimplementedVotingServiceServer) VotePig(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePig not implemented")
}
func (*UnimplementedVotingServiceServer) VoteHatchingChick(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteHatchingChick not implemented")
}
func (*UnimplementedVotingServiceServer) VoteSnail(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSnail not implemented")
}
func (*UnimplementedVotingServiceServer) VoteBacon(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBacon not implemented")
}
func (*UnimplementedVotingServiceServer) VotePizza(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePizza not implemented")
}
func (*UnimplementedVotingServiceServer) VoteTaco(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteTaco not implemented")
}
func (*UnimplementedVotingServiceServer) VoteBurrito(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBurrito not implemented")
}
func (*UnimplementedVotingServiceServer) VoteRamen(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRamen not implemented")
}
func (*UnimplementedVotingServiceServer) VoteDoughnut(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteDoughnut not implemented")
}
func (*UnimplementedVotingServiceServer) VoteChampagne(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteChampagne not implemented")
}
func (*UnimplementedVotingServiceServer) VoteTropicalDrink(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteTropicalDrink not implemented")
}
func (*UnimplementedVotingServiceServer) VoteBeer(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBeer not implemented")
}
func (*UnimplementedVotingServiceServer) VoteTumblerGlass(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteTumblerGlass not implemented")
}
func (*UnimplementedVotingServiceServer) VoteWorldMap(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWorldMap not implemented")
}
func (*UnimplementedVotingServiceServer) VoteBeachUmbrella(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBeachUmbrella not implemented")
}
func (*UnimplementedVotingServiceServer) VoteMountainSnow(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMountainSnow not implemented")
}
func (*UnimplementedVotingServiceServer) VoteCamping(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCamping not implemented")
}
func (*UnimplementedVotingServiceServer) VoteSteamLocomotive(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSteamLocomotive not implemented")
}
func (*UnimplementedVotingServiceServer) VoteFlightDeparture(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteFlightDeparture not implemented")
}
func (*UnimplementedVotingServiceServer) VoteRocket(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRocket not implemented")
}
func (*UnimplementedVotingServiceServer) VoteStar2(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteStar2 not implemented")
}
func (*UnimplementedVotingServiceServer) VoteSunBehindSmallCloud(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSunBehindSmallCloud not implemented")
}
func (*UnimplementedVotingServiceServer) VoteCloudWithRain(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCloudWithRain not implemented")
}
func (*UnimplementedVotingServiceServer) VoteFire(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteFire not implemented")
}
func (*UnimplementedVotingServiceServer) VoteJackOLantern(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteJackOLantern not implemented")
}
func (*UnimplementedVotingServiceServer) VoteBalloon(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBalloon not implemented")
}
func (*UnimplementedVotingServiceServer) VoteTada(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteTada not implemented")
}
func (*UnimplementedVotingServiceServer) VoteTrophy(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteTrophy not implemented")
}
func (*UnimplementedVotingServiceServer) VoteIphone(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteIphone not implemented")
}
func (*UnimplementedVotingServiceServer) VotePager(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePager not implemented")
}
func (*UnimplementedVotingServiceServer) VoteFax(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteFax not implemented")
}
func (*UnimplementedVotingServiceServer) VoteBulb(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBulb not implemented")
}
func (*UnimplementedVotingServiceServer) VoteMoneyWithWings(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMoneyWithWings not implemented")
}
func (*UnimplementedVotingServiceServer) VoteCrystalBall(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCrystalBall not implemented")
}
func (*UnimplementedVotingServiceServer) VoteUnderage(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteUnderage not implemented")
}
func (*UnimplementedVotingServiceServer) VoteInterrobang(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteInterrobang not implemented")
}
func (*UnimplementedVotingServiceServer) Vote100(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote100 not implemented")
}
func (*UnimplementedVotingServiceServer) VoteCheckeredFlag(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCheckeredFlag not implemented")
}
func (*UnimplementedVotingServiceServer) VoteCrossedSwords(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCrossedSwords not implemented")
}
func (*UnimplementedVotingServiceServer) VoteFloppyDisk(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteFloppyDisk not implemented")
}
func (*UnimplementedVotingServiceServer) Results(ctx context.Context, req *ResultsRequest) (*ResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Results not implemented")
}

func RegisterVotingServiceServer(s *grpc.Server, srv VotingServiceServer) {
	s.RegisterService(&_VotingService_serviceDesc, srv)
}

func _VotingService_VotePoop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePoop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePoop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePoop(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteJoy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteJoy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteJoy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteJoy(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSunglasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSunglasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSunglasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSunglasses(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRelaxed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRelaxed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRelaxed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRelaxed(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteStuckOutTongueWinkingEye_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteStuckOutTongueWinkingEye(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteStuckOutTongueWinkingEye",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteStuckOutTongueWinkingEye(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMoneyMouthFace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMoneyMouthFace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMoneyMouthFace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMoneyMouthFace(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteFlushed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteFlushed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteFlushed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteFlushed(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMask(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteNerdFace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteNerdFace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteNerdFace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteNerdFace(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteGhost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteGhost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteGhost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteGhost(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSkullAndCrossbones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSkullAndCrossbones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSkullAndCrossbones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSkullAndCrossbones(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteHeartEyesCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteHeartEyesCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteHeartEyesCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteHeartEyesCat(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteHearNoEvil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteHearNoEvil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteHearNoEvil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteHearNoEvil(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSeeNoEvil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSeeNoEvil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSeeNoEvil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSeeNoEvil(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSpeakNoEvil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSpeakNoEvil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSpeakNoEvil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSpeakNoEvil(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBoy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBoy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBoy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBoy(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteGirl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteGirl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteGirl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteGirl(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteWoman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteWoman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteWoman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteWoman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteOlderMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteOlderMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteOlderMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteOlderMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePoliceman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePoliceman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePoliceman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePoliceman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteGuardsman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteGuardsman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteGuardsman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteGuardsman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteConstructionWorkerMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteConstructionWorkerMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteConstructionWorkerMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteConstructionWorkerMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePrince_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePrince(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePrince",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePrince(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePrincess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePrincess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePrincess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePrincess(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteManInTuxedo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteManInTuxedo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteManInTuxedo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteManInTuxedo(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBrideWithVeil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBrideWithVeil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBrideWithVeil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBrideWithVeil(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMrsClaus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMrsClaus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMrsClaus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMrsClaus(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSanta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSanta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSanta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSanta(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTurkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTurkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTurkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTurkey(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRabbit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRabbit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRabbit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRabbit(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteNoGoodWoman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteNoGoodWoman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteNoGoodWoman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteNoGoodWoman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteOkWoman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteOkWoman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteOkWoman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteOkWoman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRaisingHandWoman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRaisingHandWoman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRaisingHandWoman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRaisingHandWoman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBowingMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBowingMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBowingMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBowingMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteManFacepalming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteManFacepalming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteManFacepalming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteManFacepalming(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteWomanShrugging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteWomanShrugging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteWomanShrugging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteWomanShrugging(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMassageWoman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMassageWoman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMassageWoman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMassageWoman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteWalkingMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteWalkingMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteWalkingMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteWalkingMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRunningMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRunningMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRunningMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRunningMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteDancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteDancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteDancer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteDancer(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteManDancing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteManDancing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteManDancing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteManDancing(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteDancingWomen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteDancingWomen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteDancingWomen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteDancingWomen(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRainbow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRainbow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRainbow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRainbow(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSkier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSkier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSkier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSkier(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteGolfingMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteGolfingMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteGolfingMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteGolfingMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSurfingMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSurfingMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSurfingMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSurfingMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBasketballMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBasketballMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBasketballMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBasketballMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBikingMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBikingMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBikingMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBikingMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePointUp2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePointUp2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePointUp2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePointUp2(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteVulcanSalute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteVulcanSalute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteVulcanSalute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteVulcanSalute(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMetal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMetal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMetal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMetal(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCallMeHand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCallMeHand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCallMeHand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCallMeHand(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteThumbsup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteThumbsup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteThumbsup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteThumbsup(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteWave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteWave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteWave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteWave(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteClap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteClap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteClap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteClap(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRaisedHands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRaisedHands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRaisedHands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRaisedHands(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePray(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteDog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteDog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteDog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteDog(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCat2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCat2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCat2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCat2(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePig(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteHatchingChick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteHatchingChick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteHatchingChick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteHatchingChick(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSnail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSnail(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBacon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBacon(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePizza_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePizza(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePizza",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePizza(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTaco_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTaco(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTaco",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTaco(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBurrito_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBurrito(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBurrito",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBurrito(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRamen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRamen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRamen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRamen(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteDoughnut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteDoughnut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteDoughnut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteDoughnut(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteChampagne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteChampagne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteChampagne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteChampagne(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTropicalDrink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTropicalDrink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTropicalDrink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTropicalDrink(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBeer(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTumblerGlass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTumblerGlass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTumblerGlass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTumblerGlass(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteWorldMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteWorldMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteWorldMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteWorldMap(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBeachUmbrella_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBeachUmbrella(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBeachUmbrella",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBeachUmbrella(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMountainSnow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMountainSnow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMountainSnow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMountainSnow(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCamping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCamping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCamping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCamping(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSteamLocomotive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSteamLocomotive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSteamLocomotive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSteamLocomotive(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteFlightDeparture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteFlightDeparture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteFlightDeparture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteFlightDeparture(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRocket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRocket(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteStar2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteStar2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteStar2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteStar2(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSunBehindSmallCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSunBehindSmallCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSunBehindSmallCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSunBehindSmallCloud(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCloudWithRain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCloudWithRain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCloudWithRain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCloudWithRain(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteFire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteFire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteFire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteFire(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteJackOLantern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteJackOLantern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteJackOLantern",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteJackOLantern(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBalloon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBalloon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBalloon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBalloon(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTada_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTada(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTada",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTada(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTrophy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTrophy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTrophy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTrophy(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteIphone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteIphone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteIphone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteIphone(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePager(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteFax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteFax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteFax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteFax(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBulb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBulb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBulb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBulb(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMoneyWithWings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMoneyWithWings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMoneyWithWings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMoneyWithWings(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCrystalBall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCrystalBall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCrystalBall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCrystalBall(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteUnderage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteUnderage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteUnderage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteUnderage(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteInterrobang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteInterrobang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteInterrobang",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteInterrobang(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_Vote100_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).Vote100(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/Vote100",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).Vote100(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCheckeredFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCheckeredFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCheckeredFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCheckeredFlag(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCrossedSwords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCrossedSwords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCrossedSwords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCrossedSwords(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteFloppyDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteFloppyDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteFloppyDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteFloppyDisk(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_Results_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).Results(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/Results",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).Results(ctx, req.(*ResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VotingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "emojivoto.v1.VotingService",
	HandlerType: (*VotingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VotePoop",
			Handler:    _VotingService_VotePoop_Handler,
		},
		{
			MethodName: "VoteJoy",
			Handler:    _VotingService_VoteJoy_Handler,
		},
		{
			MethodName: "VoteSunglasses",
			Handler:    _VotingService_VoteSunglasses_Handler,
		},
		{
			MethodName: "VoteRelaxed",
			Handler:    _VotingService_VoteRelaxed_Handler,
		},
		{
			MethodName: "VoteStuckOutTongueWinkingEye",
			Handler:    _VotingService_VoteStuckOutTongueWinkingEye_Handler,
		},
		{
			MethodName: "VoteMoneyMouthFace",
			Handler:    _VotingService_VoteMoneyMouthFace_Handler,
		},
		{
			MethodName: "VoteFlushed",
			Handler:    _VotingService_VoteFlushed_Handler,
		},
		{
			MethodName: "VoteMask",
			Handler:    _VotingService_VoteMask_Handler,
		},
		{
			MethodName: "VoteNerdFace",
			Handler:    _VotingService_VoteNerdFace_Handler,
		},
		{
			MethodName: "VoteGhost",
			Handler:    _VotingService_VoteGhost_Handler,
		},
		{
			MethodName: "VoteSkullAndCrossbones",
			Handler:    _VotingService_VoteSkullAndCrossbones_Handler,
		},
		{
			MethodName: "VoteHeartEyesCat",
			Handler:    _VotingService_VoteHeartEyesCat_Handler,
		},
		{
			MethodName: "VoteHearNoEvil",
			Handler:    _VotingService_VoteHearNoEvil_Handler,
		},
		{
			MethodName: "VoteSeeNoEvil",
			Handler:    _VotingService_VoteSeeNoEvil_Handler,
		},
		{
			MethodName: "VoteSpeakNoEvil",
			Handler:    _VotingService_VoteSpeakNoEvil_Handler,
		},
		{
			MethodName: "VoteBoy",
			Handler:    _VotingService_VoteBoy_Handler,
		},
		{
			MethodName: "VoteGirl",
			Handler:    _VotingService_VoteGirl_Handler,
		},
		{
			MethodName: "VoteMan",
			Handler:    _VotingService_VoteMan_Handler,
		},
		{
			MethodName: "VoteWoman",
			Handler:    _VotingService_VoteWoman_Handler,
		},
		{
			MethodName: "VoteOlderMan",
			Handler:    _VotingService_VoteOlderMan_Handler,
		},
		{
			MethodName: "VotePoliceman",
			Handler:    _VotingService_VotePoliceman_Handler,
		},
		{
			MethodName: "VoteGuardsman",
			Handler:    _VotingService_VoteGuardsman_Handler,
		},
		{
			MethodName: "VoteConstructionWorkerMan",
			Handler:    _VotingService_VoteConstructionWorkerMan_Handler,
		},
		{
			MethodName: "VotePrince",
			Handler:    _VotingService_VotePrince_Handler,
		},
		{
			MethodName: "VotePrincess",
			Handler:    _VotingService_VotePrincess_Handler,
		},
		{
			MethodName: "VoteManInTuxedo",
			Handler:    _VotingService_VoteManInTuxedo_Handler,
		},
		{
			MethodName: "VoteBrideWithVeil",
			Handler:    _VotingService_VoteBrideWithVeil_Handler,
		},
		{
			MethodName: "VoteMrsClaus",
			Handler:    _VotingService_VoteMrsClaus_Handler,
		},
		{
			MethodName: "VoteSanta",
			Handler:    _VotingService_VoteSanta_Handler,
		},
		{
			MethodName: "VoteTurkey",
			Handler:    _VotingService_VoteTurkey_Handler,
		},
		{
			MethodName: "VoteRabbit",
			Handler:    _VotingService_VoteRabbit_Handler,
		},
		{
			MethodName: "VoteNoGoodWoman",
			Handler:    _VotingService_VoteNoGoodWoman_Handler,
		},
		{
			MethodName: "VoteOkWoman",
			Handler:    _VotingService_VoteOkWoman_Handler,
		},
		{
			MethodName: "VoteRaisingHandWoman",
			Handler:    _VotingService_VoteRaisingHandWoman_Handler,
		},
		{
			MethodName: "VoteBowingMan",
			Handler:    _VotingService_VoteBowingMan_Handler,
		},
		{
			MethodName: "VoteManFacepalming",
			Handler:    _VotingService_VoteManFacepalming_Handler,
		},
		{
			MethodName: "VoteWomanShrugging",
			Handler:    _VotingService_VoteWomanShrugging_Handler,
		},
		{
			MethodName: "VoteMassageWoman",
			Handler:    _VotingService_VoteMassageWoman_Handler,
		},
		{
			MethodName: "VoteWalkingMan",
			Handler:    _VotingService_VoteWalkingMan_Handler,
		},
		{
			MethodName: "VoteRunningMan",
			Handler:    _VotingService_VoteRunningMan_Handler,
		},
		{
			MethodName: "VoteDancer",
			Handler:    _VotingService_VoteDancer_Handler,
		},
		{
			MethodName: "VoteManDancing",
			Handler:    _VotingService_VoteManDancing_Handler,
		},
		{
			MethodName: "VoteDancingWomen",
			Handler:    _VotingService_VoteDancingWomen_Handler,
		},
		{
			MethodName: "VoteRainbow",
			Handler:    _VotingService_VoteRainbow_Handler,
		},
		{
			MethodName: "VoteSkier",
			Handler:    _VotingService_VoteSkier_Handler,
		},
		{
			MethodName: "VoteGolfingMan",
			Handler:    _VotingService_VoteGolfingMan_Handler,
		},
		{
			MethodName: "VoteSurfingMan",
			Handler:    _VotingService_VoteSurfingMan_Handler,
		},
		{
			MethodName: "VoteBasketballMan",
			Handler:    _VotingService_VoteBasketballMan_Handler,
		},
		{
			MethodName: "VoteBikingMan",
			Handler:    _VotingService_VoteBikingMan_Handler,
		},
		{
			MethodName: "VotePointUp2",
			Handler:    _VotingService_VotePointUp2_Handler,
		},
		{
			MethodName: "VoteVulcanSalute",
			Handler:    _VotingService_VoteVulcanSalute_Handler,
		},
		{
			MethodName: "VoteMetal",
			Handler:    _VotingService_VoteMetal_Handler,
		},
		{
			MethodName: "VoteCallMeHand",
			Handler:    _VotingService_VoteCallMeHand_Handler,
		},
		{
			MethodName: "VoteThumbsup",
			Handler:    _VotingService_VoteThumbsup_Handler,
		},
		{
			MethodName: "VoteWave",
			Handler:    _VotingService_VoteWave_Handler,
		},
		{
			MethodName: "VoteClap",
			Handler:    _VotingService_VoteClap_Handler,
		},
		{
			MethodName: "VoteRaisedHands",
			Handler:    _VotingService_VoteRaisedHands_Handler,
		},
		{
			MethodName: "VotePray",
			Handler:    _VotingService_VotePray_Handler,
		},
		{
			MethodName: "VoteDog",
			Handler:    _VotingService_VoteDog_Handler,
		},
		{
			MethodName: "VoteCat2",
			Handler:    _VotingService_VoteCat2_Handler,
		},
		{
			MethodName: "VotePig",
			Handler:    _VotingService_VotePig_Handler,
		},
		{
			MethodName: "VoteHatchingChick",
			Handler:    _VotingService_VoteHatchingChick_Handler,
		},
		{
			MethodName: "VoteSnail",
			Handler:    _VotingService_VoteSnail_Handler,
		},
		{
			MethodName: "VoteBacon",
			Handler:    _VotingService_VoteBacon_Handler,
		},
		{
			MethodName: "VotePizza",
			Handler:    _VotingService_VotePizza_Handler,
		},
		{
			MethodName: "VoteTaco",
			Handler:    _VotingService_VoteTaco_Handler,
		},
		{
			MethodName: "VoteBurrito",
			Handler:    _VotingService_VoteBurrito_Handler,
		},
		{
			MethodName: "VoteRamen",
			Handler:    _VotingService_VoteRamen_Handler,
		},
		{
			MethodName: "VoteDoughnut",
			Handler:    _VotingService_VoteDoughnut_Handler,
		},
		{
			MethodName: "VoteChampagne",
			Handler:    _VotingService_VoteChampagne_Handler,
		},
		{
			MethodName: "VoteTropicalDrink",
			Handler:    _VotingService_VoteTropicalDrink_Handler,
		},
		{
			MethodName: "VoteBeer",
			Handler:    _VotingService_VoteBeer_Handler,
		},
		{
			MethodName: "VoteTumblerGlass",
			Handler:    _VotingService_VoteTumblerGlass_Handler,
		},
		{
			MethodName: "VoteWorldMap",
			Handler:    _VotingService_VoteWorldMap_Handler,
		},
		{
			MethodName: "VoteBeachUmbrella",
			Handler:    _VotingService_VoteBeachUmbrella_Handler,
		},
		{
			MethodName: "VoteMountainSnow",
			Handler:    _VotingService_VoteMountainSnow_Handler,
		},
		{
			MethodName: "VoteCamping",
			Handler:    _VotingService_VoteCamping_Handler,
		},
		{
			MethodName: "VoteSteamLocomotive",
			Handler:    _VotingService_VoteSteamLocomotive_Handler,
		},
		{
			MethodName: "VoteFlightDeparture",
			Handler:    _VotingService_VoteFlightDeparture_Handler,
		},
		{
			MethodName: "VoteRocket",
			Handler:    _VotingService_VoteRocket_Handler,
		},
		{
			MethodName: "VoteStar2",
			Handler:    _VotingService_VoteStar2_Handler,
		},
		{
			MethodName: "VoteSunBehindSmallCloud",
			Handler:    _VotingService_VoteSunBehindSmallCloud_Handler,
		},
		{
			MethodName: "VoteCloudWithRain",
			Handler:    _VotingService_VoteCloudWithRain_Handler,
		},
		{
			MethodName: "VoteFire",
			Handler:    _VotingService_VoteFire_Handler,
		},
		{
			MethodName: "VoteJackOLantern",
			Handler:    _VotingService_VoteJackOLantern_Handler,
		},
		{
			MethodName: "VoteBalloon",
			Handler:    _VotingService_VoteBalloon_Handler,
		},
		{
			MethodName: "VoteTada",
			Handler:    _VotingService_VoteTada_Handler,
		},
		{
			MethodName: "VoteTrophy",
			Handler:    _VotingService_VoteTrophy_Handler,
		},
		{
			MethodName: "VoteIphone",
			Handler:    _VotingService_VoteIphone_Handler,
		},
		{
			MethodName: "VotePager",
			Handler:    _VotingService_VotePager_Handler,
		},
		{
			MethodName: "VoteFax",
			Handler:    _VotingService_VoteFax_Handler,
		},
		{
			MethodName: "VoteBulb",
			Handler:    _VotingService_VoteBulb_Handler,
		},
		{
			MethodName: "VoteMoneyWithWings",
			Handler:    _VotingService_VoteMoneyWithWings_Handler,
		},
		{
			MethodName: "VoteCrystalBall",
			Handler:    _VotingService_VoteCrystalBall_Handler,
		},
		{
			MethodName: "VoteUnderage",
			Handler:    _VotingService_VoteUnderage_Handler,
		},
		{
			MethodName: "VoteInterrobang",
			Handler:    _VotingService_VoteInterrobang_Handler,
		},
		{
			MethodName: "Vote100",
			Handler:    _VotingService_Vote100_Handler,
		},
		{
			MethodName: "VoteCheckeredFlag",
			Handler:    _VotingService_VoteCheckeredFlag_Handler,
		},
		{
			MethodName: "VoteCrossedSwords",
			Handler:    _VotingService_VoteCrossedSwords_Handler,
		},
		{
			MethodName: "VoteFloppyDisk",
			Handler:    _VotingService_VoteFloppyDisk_Handler,
		},
		{
			MethodName: "Results",
			Handler:    _VotingService_Results_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/Voting.proto",
}
