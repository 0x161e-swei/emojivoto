// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/Voting.proto

package emojivoto_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VotingResult struct {
	Shortcode string `protobuf:"bytes,1,opt,name=Shortcode" json:"Shortcode,omitempty"`
	Votes     int32  `protobuf:"varint,2,opt,name=Votes" json:"Votes,omitempty"`
}

func (m *VotingResult) Reset()                    { *m = VotingResult{} }
func (m *VotingResult) String() string            { return proto.CompactTextString(m) }
func (*VotingResult) ProtoMessage()               {}
func (*VotingResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *VotingResult) GetShortcode() string {
	if m != nil {
		return m.Shortcode
	}
	return ""
}

func (m *VotingResult) GetVotes() int32 {
	if m != nil {
		return m.Votes
	}
	return 0
}

type VoteRequest struct {
}

func (m *VoteRequest) Reset()                    { *m = VoteRequest{} }
func (m *VoteRequest) String() string            { return proto.CompactTextString(m) }
func (*VoteRequest) ProtoMessage()               {}
func (*VoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type VoteResponse struct {
}

func (m *VoteResponse) Reset()                    { *m = VoteResponse{} }
func (m *VoteResponse) String() string            { return proto.CompactTextString(m) }
func (*VoteResponse) ProtoMessage()               {}
func (*VoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type ResultsRequest struct {
}

func (m *ResultsRequest) Reset()                    { *m = ResultsRequest{} }
func (m *ResultsRequest) String() string            { return proto.CompactTextString(m) }
func (*ResultsRequest) ProtoMessage()               {}
func (*ResultsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type ResultsResponse struct {
	Results []*VotingResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *ResultsResponse) Reset()                    { *m = ResultsResponse{} }
func (m *ResultsResponse) String() string            { return proto.CompactTextString(m) }
func (*ResultsResponse) ProtoMessage()               {}
func (*ResultsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ResultsResponse) GetResults() []*VotingResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*VotingResult)(nil), "emojivoto.v1.VotingResult")
	proto.RegisterType((*VoteRequest)(nil), "emojivoto.v1.VoteRequest")
	proto.RegisterType((*VoteResponse)(nil), "emojivoto.v1.VoteResponse")
	proto.RegisterType((*ResultsRequest)(nil), "emojivoto.v1.ResultsRequest")
	proto.RegisterType((*ResultsResponse)(nil), "emojivoto.v1.ResultsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VotingService service

type VotingServiceClient interface {
	VotePoop(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteJoy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSunglasses(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRelaxed(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteStuckOutTongueWinkingEye(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMoneyMouthFace(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteFlushed(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMask(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteNerdFace(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteGhost(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSkullAndCrossbones(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteHeartEyesCat(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteHearNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSeeNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSpeakNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBoy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteGirl(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteOlderMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePoliceman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteGuardsman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteConstructionWorkerMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePrince(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePrincess(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteManInTuxedo(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBrideWithVeil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMrsClaus(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSanta(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTurkey(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRabbit(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteNoGoodWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteOkWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRaisingHandWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBowingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteManFacepalming(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteWomanShrugging(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMassageWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteWalkingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRunningMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteDancer(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteManDancing(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteDancingWomen(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRainbow(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSkier(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteGolfingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSurfingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBasketballMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBikingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePointUp2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteVulcanSalute(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMetal(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCallMeHand(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteThumbsup(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteWave(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteClap(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRaisedHands(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePray(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteDog(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCat2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePig(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteHatchingChick(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSnail(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBacon(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePizza(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTaco(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBurrito(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRamen(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteDoughnut(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteChampagne(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTropicalDrink(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBeer(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTumblerGlass(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteWorldMap(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBeachUmbrella(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMountainSnow(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCamping(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSteamLocomotive(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteFlightDeparture(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRocket(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteStar2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSunBehindSmallCloud(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCloudWithRain(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteFire(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteJackOLantern(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBalloon(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTada(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTrophy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteIphone(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePager(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteFax(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBulb(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMoneyWithWings(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCrystalBall(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteUnderage(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteInterrobang(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	Vote100(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCheckeredFlag(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCrossedSwords(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteFloppyDisk(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	Results(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error)
}

type votingServiceClient struct {
	cc *grpc.ClientConn
}

func NewVotingServiceClient(cc *grpc.ClientConn) VotingServiceClient {
	return &votingServiceClient{cc}
}

func (c *votingServiceClient) VotePoop(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePoop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteJoy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteJoy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSunglasses(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSunglasses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRelaxed(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRelaxed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteStuckOutTongueWinkingEye(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteStuckOutTongueWinkingEye", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMoneyMouthFace(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMoneyMouthFace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteFlushed(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteFlushed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMask(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteNerdFace(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteNerdFace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteGhost(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteGhost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSkullAndCrossbones(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSkullAndCrossbones", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteHeartEyesCat(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteHeartEyesCat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteHearNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteHearNoEvil", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSeeNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSeeNoEvil", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSpeakNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSpeakNoEvil", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBoy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBoy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteGirl(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteGirl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteWoman", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteOlderMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteOlderMan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePoliceman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePoliceman", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteGuardsman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteGuardsman", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteConstructionWorkerMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteConstructionWorkerMan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePrince(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePrince", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePrincess(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePrincess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteManInTuxedo(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteManInTuxedo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBrideWithVeil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBrideWithVeil", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMrsClaus(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMrsClaus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSanta(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSanta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTurkey(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTurkey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRabbit(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRabbit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteNoGoodWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteNoGoodWoman", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteOkWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteOkWoman", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRaisingHandWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRaisingHandWoman", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBowingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBowingMan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteManFacepalming(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteManFacepalming", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteWomanShrugging(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteWomanShrugging", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMassageWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMassageWoman", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteWalkingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteWalkingMan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRunningMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRunningMan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteDancer(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteDancer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteManDancing(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteManDancing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteDancingWomen(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteDancingWomen", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRainbow(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRainbow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSkier(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSkier", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteGolfingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteGolfingMan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSurfingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSurfingMan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBasketballMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBasketballMan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBikingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBikingMan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePointUp2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePointUp2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteVulcanSalute(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteVulcanSalute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMetal(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMetal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCallMeHand(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCallMeHand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteThumbsup(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteThumbsup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteWave(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteWave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteClap(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteClap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRaisedHands(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRaisedHands", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePray(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePray", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteDog(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteDog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCat2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCat2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePig(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteHatchingChick(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteHatchingChick", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSnail(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSnail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBacon(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBacon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePizza(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePizza", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTaco(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTaco", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBurrito(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBurrito", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRamen(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRamen", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteDoughnut(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteDoughnut", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteChampagne(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteChampagne", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTropicalDrink(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTropicalDrink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBeer(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBeer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTumblerGlass(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTumblerGlass", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteWorldMap(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteWorldMap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBeachUmbrella(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBeachUmbrella", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMountainSnow(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMountainSnow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCamping(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCamping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSteamLocomotive(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSteamLocomotive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteFlightDeparture(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteFlightDeparture", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRocket(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRocket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteStar2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteStar2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSunBehindSmallCloud(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSunBehindSmallCloud", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCloudWithRain(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCloudWithRain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteFire(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteFire", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteJackOLantern(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteJackOLantern", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBalloon(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBalloon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTada(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTada", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTrophy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTrophy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteIphone(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteIphone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePager(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePager", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteFax(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteFax", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBulb(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBulb", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMoneyWithWings(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMoneyWithWings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCrystalBall(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCrystalBall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteUnderage(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteUnderage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteInterrobang(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteInterrobang", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) Vote100(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/Vote100", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCheckeredFlag(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCheckeredFlag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCrossedSwords(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCrossedSwords", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteFloppyDisk(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteFloppyDisk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) Results(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error) {
	out := new(ResultsResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/Results", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VotingService service

type VotingServiceServer interface {
	VotePoop(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteJoy(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSunglasses(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRelaxed(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteStuckOutTongueWinkingEye(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMoneyMouthFace(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteFlushed(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMask(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteNerdFace(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteGhost(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSkullAndCrossbones(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteHeartEyesCat(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteHearNoEvil(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSeeNoEvil(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSpeakNoEvil(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBoy(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteGirl(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteWoman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteOlderMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePoliceman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteGuardsman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteConstructionWorkerMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePrince(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePrincess(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteManInTuxedo(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBrideWithVeil(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMrsClaus(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSanta(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTurkey(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRabbit(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteNoGoodWoman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteOkWoman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRaisingHandWoman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBowingMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteManFacepalming(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteWomanShrugging(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMassageWoman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteWalkingMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRunningMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteDancer(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteManDancing(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteDancingWomen(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRainbow(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSkier(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteGolfingMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSurfingMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBasketballMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBikingMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePointUp2(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteVulcanSalute(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMetal(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCallMeHand(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteThumbsup(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteWave(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteClap(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRaisedHands(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePray(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteDog(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCat2(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePig(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteHatchingChick(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSnail(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBacon(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePizza(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTaco(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBurrito(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRamen(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteDoughnut(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteChampagne(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTropicalDrink(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBeer(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTumblerGlass(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteWorldMap(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBeachUmbrella(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMountainSnow(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCamping(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSteamLocomotive(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteFlightDeparture(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRocket(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteStar2(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSunBehindSmallCloud(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCloudWithRain(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteFire(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteJackOLantern(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBalloon(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTada(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTrophy(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteIphone(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePager(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteFax(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBulb(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMoneyWithWings(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCrystalBall(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteUnderage(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteInterrobang(context.Context, *VoteRequest) (*VoteResponse, error)
	Vote100(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCheckeredFlag(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCrossedSwords(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteFloppyDisk(context.Context, *VoteRequest) (*VoteResponse, error)
	Results(context.Context, *ResultsRequest) (*ResultsResponse, error)
}

func RegisterVotingServiceServer(s *grpc.Server, srv VotingServiceServer) {
	s.RegisterService(&_VotingService_serviceDesc, srv)
}

func _VotingService_VotePoop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePoop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePoop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePoop(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteJoy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteJoy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteJoy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteJoy(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSunglasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSunglasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSunglasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSunglasses(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRelaxed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRelaxed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRelaxed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRelaxed(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteStuckOutTongueWinkingEye_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteStuckOutTongueWinkingEye(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteStuckOutTongueWinkingEye",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteStuckOutTongueWinkingEye(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMoneyMouthFace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMoneyMouthFace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMoneyMouthFace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMoneyMouthFace(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteFlushed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteFlushed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteFlushed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteFlushed(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMask(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteNerdFace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteNerdFace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteNerdFace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteNerdFace(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteGhost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteGhost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteGhost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteGhost(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSkullAndCrossbones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSkullAndCrossbones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSkullAndCrossbones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSkullAndCrossbones(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteHeartEyesCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteHeartEyesCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteHeartEyesCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteHeartEyesCat(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteHearNoEvil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteHearNoEvil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteHearNoEvil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteHearNoEvil(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSeeNoEvil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSeeNoEvil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSeeNoEvil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSeeNoEvil(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSpeakNoEvil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSpeakNoEvil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSpeakNoEvil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSpeakNoEvil(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBoy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBoy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBoy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBoy(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteGirl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteGirl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteGirl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteGirl(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteWoman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteWoman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteWoman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteWoman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteOlderMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteOlderMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteOlderMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteOlderMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePoliceman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePoliceman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePoliceman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePoliceman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteGuardsman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteGuardsman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteGuardsman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteGuardsman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteConstructionWorkerMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteConstructionWorkerMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteConstructionWorkerMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteConstructionWorkerMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePrince_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePrince(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePrince",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePrince(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePrincess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePrincess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePrincess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePrincess(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteManInTuxedo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteManInTuxedo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteManInTuxedo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteManInTuxedo(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBrideWithVeil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBrideWithVeil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBrideWithVeil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBrideWithVeil(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMrsClaus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMrsClaus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMrsClaus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMrsClaus(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSanta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSanta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSanta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSanta(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTurkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTurkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTurkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTurkey(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRabbit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRabbit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRabbit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRabbit(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteNoGoodWoman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteNoGoodWoman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteNoGoodWoman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteNoGoodWoman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteOkWoman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteOkWoman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteOkWoman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteOkWoman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRaisingHandWoman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRaisingHandWoman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRaisingHandWoman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRaisingHandWoman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBowingMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBowingMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBowingMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBowingMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteManFacepalming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteManFacepalming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteManFacepalming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteManFacepalming(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteWomanShrugging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteWomanShrugging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteWomanShrugging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteWomanShrugging(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMassageWoman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMassageWoman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMassageWoman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMassageWoman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteWalkingMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteWalkingMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteWalkingMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteWalkingMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRunningMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRunningMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRunningMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRunningMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteDancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteDancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteDancer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteDancer(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteManDancing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteManDancing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteManDancing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteManDancing(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteDancingWomen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteDancingWomen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteDancingWomen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteDancingWomen(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRainbow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRainbow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRainbow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRainbow(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSkier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSkier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSkier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSkier(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteGolfingMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteGolfingMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteGolfingMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteGolfingMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSurfingMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSurfingMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSurfingMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSurfingMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBasketballMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBasketballMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBasketballMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBasketballMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBikingMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBikingMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBikingMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBikingMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePointUp2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePointUp2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePointUp2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePointUp2(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteVulcanSalute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteVulcanSalute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteVulcanSalute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteVulcanSalute(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMetal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMetal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMetal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMetal(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCallMeHand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCallMeHand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCallMeHand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCallMeHand(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteThumbsup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteThumbsup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteThumbsup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteThumbsup(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteWave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteWave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteWave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteWave(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteClap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteClap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteClap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteClap(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRaisedHands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRaisedHands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRaisedHands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRaisedHands(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePray(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteDog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteDog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteDog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteDog(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCat2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCat2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCat2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCat2(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePig(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteHatchingChick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteHatchingChick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteHatchingChick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteHatchingChick(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSnail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSnail(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBacon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBacon(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePizza_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePizza(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePizza",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePizza(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTaco_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTaco(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTaco",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTaco(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBurrito_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBurrito(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBurrito",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBurrito(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRamen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRamen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRamen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRamen(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteDoughnut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteDoughnut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteDoughnut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteDoughnut(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteChampagne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteChampagne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteChampagne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteChampagne(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTropicalDrink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTropicalDrink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTropicalDrink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTropicalDrink(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBeer(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTumblerGlass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTumblerGlass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTumblerGlass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTumblerGlass(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteWorldMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteWorldMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteWorldMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteWorldMap(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBeachUmbrella_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBeachUmbrella(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBeachUmbrella",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBeachUmbrella(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMountainSnow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMountainSnow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMountainSnow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMountainSnow(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCamping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCamping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCamping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCamping(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSteamLocomotive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSteamLocomotive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSteamLocomotive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSteamLocomotive(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteFlightDeparture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteFlightDeparture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteFlightDeparture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteFlightDeparture(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRocket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRocket(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteStar2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteStar2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteStar2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteStar2(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSunBehindSmallCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSunBehindSmallCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSunBehindSmallCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSunBehindSmallCloud(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCloudWithRain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCloudWithRain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCloudWithRain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCloudWithRain(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteFire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteFire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteFire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteFire(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteJackOLantern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteJackOLantern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteJackOLantern",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteJackOLantern(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBalloon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBalloon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBalloon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBalloon(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTada_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTada(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTada",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTada(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTrophy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTrophy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTrophy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTrophy(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteIphone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteIphone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteIphone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteIphone(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePager(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteFax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteFax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteFax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteFax(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBulb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBulb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBulb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBulb(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMoneyWithWings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMoneyWithWings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMoneyWithWings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMoneyWithWings(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCrystalBall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCrystalBall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCrystalBall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCrystalBall(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteUnderage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteUnderage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteUnderage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteUnderage(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteInterrobang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteInterrobang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteInterrobang",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteInterrobang(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_Vote100_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).Vote100(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/Vote100",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).Vote100(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCheckeredFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCheckeredFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCheckeredFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCheckeredFlag(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCrossedSwords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCrossedSwords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCrossedSwords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCrossedSwords(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteFloppyDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteFloppyDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteFloppyDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteFloppyDisk(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_Results_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).Results(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/Results",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).Results(ctx, req.(*ResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VotingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "emojivoto.v1.VotingService",
	HandlerType: (*VotingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VotePoop",
			Handler:    _VotingService_VotePoop_Handler,
		},
		{
			MethodName: "VoteJoy",
			Handler:    _VotingService_VoteJoy_Handler,
		},
		{
			MethodName: "VoteSunglasses",
			Handler:    _VotingService_VoteSunglasses_Handler,
		},
		{
			MethodName: "VoteRelaxed",
			Handler:    _VotingService_VoteRelaxed_Handler,
		},
		{
			MethodName: "VoteStuckOutTongueWinkingEye",
			Handler:    _VotingService_VoteStuckOutTongueWinkingEye_Handler,
		},
		{
			MethodName: "VoteMoneyMouthFace",
			Handler:    _VotingService_VoteMoneyMouthFace_Handler,
		},
		{
			MethodName: "VoteFlushed",
			Handler:    _VotingService_VoteFlushed_Handler,
		},
		{
			MethodName: "VoteMask",
			Handler:    _VotingService_VoteMask_Handler,
		},
		{
			MethodName: "VoteNerdFace",
			Handler:    _VotingService_VoteNerdFace_Handler,
		},
		{
			MethodName: "VoteGhost",
			Handler:    _VotingService_VoteGhost_Handler,
		},
		{
			MethodName: "VoteSkullAndCrossbones",
			Handler:    _VotingService_VoteSkullAndCrossbones_Handler,
		},
		{
			MethodName: "VoteHeartEyesCat",
			Handler:    _VotingService_VoteHeartEyesCat_Handler,
		},
		{
			MethodName: "VoteHearNoEvil",
			Handler:    _VotingService_VoteHearNoEvil_Handler,
		},
		{
			MethodName: "VoteSeeNoEvil",
			Handler:    _VotingService_VoteSeeNoEvil_Handler,
		},
		{
			MethodName: "VoteSpeakNoEvil",
			Handler:    _VotingService_VoteSpeakNoEvil_Handler,
		},
		{
			MethodName: "VoteBoy",
			Handler:    _VotingService_VoteBoy_Handler,
		},
		{
			MethodName: "VoteGirl",
			Handler:    _VotingService_VoteGirl_Handler,
		},
		{
			MethodName: "VoteMan",
			Handler:    _VotingService_VoteMan_Handler,
		},
		{
			MethodName: "VoteWoman",
			Handler:    _VotingService_VoteWoman_Handler,
		},
		{
			MethodName: "VoteOlderMan",
			Handler:    _VotingService_VoteOlderMan_Handler,
		},
		{
			MethodName: "VotePoliceman",
			Handler:    _VotingService_VotePoliceman_Handler,
		},
		{
			MethodName: "VoteGuardsman",
			Handler:    _VotingService_VoteGuardsman_Handler,
		},
		{
			MethodName: "VoteConstructionWorkerMan",
			Handler:    _VotingService_VoteConstructionWorkerMan_Handler,
		},
		{
			MethodName: "VotePrince",
			Handler:    _VotingService_VotePrince_Handler,
		},
		{
			MethodName: "VotePrincess",
			Handler:    _VotingService_VotePrincess_Handler,
		},
		{
			MethodName: "VoteManInTuxedo",
			Handler:    _VotingService_VoteManInTuxedo_Handler,
		},
		{
			MethodName: "VoteBrideWithVeil",
			Handler:    _VotingService_VoteBrideWithVeil_Handler,
		},
		{
			MethodName: "VoteMrsClaus",
			Handler:    _VotingService_VoteMrsClaus_Handler,
		},
		{
			MethodName: "VoteSanta",
			Handler:    _VotingService_VoteSanta_Handler,
		},
		{
			MethodName: "VoteTurkey",
			Handler:    _VotingService_VoteTurkey_Handler,
		},
		{
			MethodName: "VoteRabbit",
			Handler:    _VotingService_VoteRabbit_Handler,
		},
		{
			MethodName: "VoteNoGoodWoman",
			Handler:    _VotingService_VoteNoGoodWoman_Handler,
		},
		{
			MethodName: "VoteOkWoman",
			Handler:    _VotingService_VoteOkWoman_Handler,
		},
		{
			MethodName: "VoteRaisingHandWoman",
			Handler:    _VotingService_VoteRaisingHandWoman_Handler,
		},
		{
			MethodName: "VoteBowingMan",
			Handler:    _VotingService_VoteBowingMan_Handler,
		},
		{
			MethodName: "VoteManFacepalming",
			Handler:    _VotingService_VoteManFacepalming_Handler,
		},
		{
			MethodName: "VoteWomanShrugging",
			Handler:    _VotingService_VoteWomanShrugging_Handler,
		},
		{
			MethodName: "VoteMassageWoman",
			Handler:    _VotingService_VoteMassageWoman_Handler,
		},
		{
			MethodName: "VoteWalkingMan",
			Handler:    _VotingService_VoteWalkingMan_Handler,
		},
		{
			MethodName: "VoteRunningMan",
			Handler:    _VotingService_VoteRunningMan_Handler,
		},
		{
			MethodName: "VoteDancer",
			Handler:    _VotingService_VoteDancer_Handler,
		},
		{
			MethodName: "VoteManDancing",
			Handler:    _VotingService_VoteManDancing_Handler,
		},
		{
			MethodName: "VoteDancingWomen",
			Handler:    _VotingService_VoteDancingWomen_Handler,
		},
		{
			MethodName: "VoteRainbow",
			Handler:    _VotingService_VoteRainbow_Handler,
		},
		{
			MethodName: "VoteSkier",
			Handler:    _VotingService_VoteSkier_Handler,
		},
		{
			MethodName: "VoteGolfingMan",
			Handler:    _VotingService_VoteGolfingMan_Handler,
		},
		{
			MethodName: "VoteSurfingMan",
			Handler:    _VotingService_VoteSurfingMan_Handler,
		},
		{
			MethodName: "VoteBasketballMan",
			Handler:    _VotingService_VoteBasketballMan_Handler,
		},
		{
			MethodName: "VoteBikingMan",
			Handler:    _VotingService_VoteBikingMan_Handler,
		},
		{
			MethodName: "VotePointUp2",
			Handler:    _VotingService_VotePointUp2_Handler,
		},
		{
			MethodName: "VoteVulcanSalute",
			Handler:    _VotingService_VoteVulcanSalute_Handler,
		},
		{
			MethodName: "VoteMetal",
			Handler:    _VotingService_VoteMetal_Handler,
		},
		{
			MethodName: "VoteCallMeHand",
			Handler:    _VotingService_VoteCallMeHand_Handler,
		},
		{
			MethodName: "VoteThumbsup",
			Handler:    _VotingService_VoteThumbsup_Handler,
		},
		{
			MethodName: "VoteWave",
			Handler:    _VotingService_VoteWave_Handler,
		},
		{
			MethodName: "VoteClap",
			Handler:    _VotingService_VoteClap_Handler,
		},
		{
			MethodName: "VoteRaisedHands",
			Handler:    _VotingService_VoteRaisedHands_Handler,
		},
		{
			MethodName: "VotePray",
			Handler:    _VotingService_VotePray_Handler,
		},
		{
			MethodName: "VoteDog",
			Handler:    _VotingService_VoteDog_Handler,
		},
		{
			MethodName: "VoteCat2",
			Handler:    _VotingService_VoteCat2_Handler,
		},
		{
			MethodName: "VotePig",
			Handler:    _VotingService_VotePig_Handler,
		},
		{
			MethodName: "VoteHatchingChick",
			Handler:    _VotingService_VoteHatchingChick_Handler,
		},
		{
			MethodName: "VoteSnail",
			Handler:    _VotingService_VoteSnail_Handler,
		},
		{
			MethodName: "VoteBacon",
			Handler:    _VotingService_VoteBacon_Handler,
		},
		{
			MethodName: "VotePizza",
			Handler:    _VotingService_VotePizza_Handler,
		},
		{
			MethodName: "VoteTaco",
			Handler:    _VotingService_VoteTaco_Handler,
		},
		{
			MethodName: "VoteBurrito",
			Handler:    _VotingService_VoteBurrito_Handler,
		},
		{
			MethodName: "VoteRamen",
			Handler:    _VotingService_VoteRamen_Handler,
		},
		{
			MethodName: "VoteDoughnut",
			Handler:    _VotingService_VoteDoughnut_Handler,
		},
		{
			MethodName: "VoteChampagne",
			Handler:    _VotingService_VoteChampagne_Handler,
		},
		{
			MethodName: "VoteTropicalDrink",
			Handler:    _VotingService_VoteTropicalDrink_Handler,
		},
		{
			MethodName: "VoteBeer",
			Handler:    _VotingService_VoteBeer_Handler,
		},
		{
			MethodName: "VoteTumblerGlass",
			Handler:    _VotingService_VoteTumblerGlass_Handler,
		},
		{
			MethodName: "VoteWorldMap",
			Handler:    _VotingService_VoteWorldMap_Handler,
		},
		{
			MethodName: "VoteBeachUmbrella",
			Handler:    _VotingService_VoteBeachUmbrella_Handler,
		},
		{
			MethodName: "VoteMountainSnow",
			Handler:    _VotingService_VoteMountainSnow_Handler,
		},
		{
			MethodName: "VoteCamping",
			Handler:    _VotingService_VoteCamping_Handler,
		},
		{
			MethodName: "VoteSteamLocomotive",
			Handler:    _VotingService_VoteSteamLocomotive_Handler,
		},
		{
			MethodName: "VoteFlightDeparture",
			Handler:    _VotingService_VoteFlightDeparture_Handler,
		},
		{
			MethodName: "VoteRocket",
			Handler:    _VotingService_VoteRocket_Handler,
		},
		{
			MethodName: "VoteStar2",
			Handler:    _VotingService_VoteStar2_Handler,
		},
		{
			MethodName: "VoteSunBehindSmallCloud",
			Handler:    _VotingService_VoteSunBehindSmallCloud_Handler,
		},
		{
			MethodName: "VoteCloudWithRain",
			Handler:    _VotingService_VoteCloudWithRain_Handler,
		},
		{
			MethodName: "VoteFire",
			Handler:    _VotingService_VoteFire_Handler,
		},
		{
			MethodName: "VoteJackOLantern",
			Handler:    _VotingService_VoteJackOLantern_Handler,
		},
		{
			MethodName: "VoteBalloon",
			Handler:    _VotingService_VoteBalloon_Handler,
		},
		{
			MethodName: "VoteTada",
			Handler:    _VotingService_VoteTada_Handler,
		},
		{
			MethodName: "VoteTrophy",
			Handler:    _VotingService_VoteTrophy_Handler,
		},
		{
			MethodName: "VoteIphone",
			Handler:    _VotingService_VoteIphone_Handler,
		},
		{
			MethodName: "VotePager",
			Handler:    _VotingService_VotePager_Handler,
		},
		{
			MethodName: "VoteFax",
			Handler:    _VotingService_VoteFax_Handler,
		},
		{
			MethodName: "VoteBulb",
			Handler:    _VotingService_VoteBulb_Handler,
		},
		{
			MethodName: "VoteMoneyWithWings",
			Handler:    _VotingService_VoteMoneyWithWings_Handler,
		},
		{
			MethodName: "VoteCrystalBall",
			Handler:    _VotingService_VoteCrystalBall_Handler,
		},
		{
			MethodName: "VoteUnderage",
			Handler:    _VotingService_VoteUnderage_Handler,
		},
		{
			MethodName: "VoteInterrobang",
			Handler:    _VotingService_VoteInterrobang_Handler,
		},
		{
			MethodName: "Vote100",
			Handler:    _VotingService_Vote100_Handler,
		},
		{
			MethodName: "VoteCheckeredFlag",
			Handler:    _VotingService_VoteCheckeredFlag_Handler,
		},
		{
			MethodName: "VoteCrossedSwords",
			Handler:    _VotingService_VoteCrossedSwords_Handler,
		},
		{
			MethodName: "VoteFloppyDisk",
			Handler:    _VotingService_VoteFloppyDisk_Handler,
		},
		{
			MethodName: "Results",
			Handler:    _VotingService_Results_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/Voting.proto",
}

func init() { proto.RegisterFile("proto/Voting.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1093 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0x4d, 0x73, 0xdb, 0x36,
	0x10, 0x1d, 0xb7, 0x93, 0xba, 0x46, 0x12, 0x27, 0x55, 0x33, 0xad, 0xe3, 0x71, 0x67, 0x3c, 0x3e,
	0xf9, 0xe4, 0x26, 0x6e, 0x0f, 0x3d, 0x36, 0xa2, 0x2c, 0xd9, 0xae, 0x65, 0x6b, 0x24, 0xd9, 0x3a,
	0x2f, 0xc9, 0x2d, 0x89, 0x12, 0xc4, 0xb2, 0xf8, 0xb0, 0xad, 0xfc, 0xd2, 0xfe, 0x9c, 0x0e, 0x49,
	0xa8, 0x4d, 0xa6, 0xcd, 0x05, 0x9b, 0x9b, 0x40, 0x72, 0x9e, 0xf6, 0xe3, 0xed, 0xdb, 0x05, 0x20,
	0x06, 0x8d, 0x21, 0x47, 0x3f, 0xde, 0x91, 0x93, 0xba, 0x38, 0xe9, 0x16, 0x83, 0x67, 0x58, 0xd3,
	0x1f, 0xf2, 0x9e, 0x1c, 0x9d, 0xdc, 0xbf, 0x3d, 0x1a, 0x8a, 0x67, 0xfd, 0xdb, 0x39, 0x5a, 0xaf,
	0xdc, 0xe0, 0x40, 0xec, 0x2c, 0x4a, 0x32, 0x2e, 0xa3, 0x1c, 0xf7, 0xb6, 0x0e, 0xb7, 0x8e, 0x77,
	0xe6, 0xff, 0x3e, 0x18, 0xbc, 0x12, 0x4f, 0xee, 0xc8, 0xa1, 0xdd, 0xfb, 0xe2, 0x70, 0xeb, 0xf8,
	0xc9, 0xbc, 0x5f, 0x1c, 0x3d, 0x17, 0x4f, 0xdb, 0x1f, 0x73, 0xfc, 0xd3, 0xa3, 0x75, 0x47, 0xbb,
	0x1d, 0x24, 0xce, 0xd1, 0x36, 0xa4, 0x2d, 0x1e, 0xbd, 0x14, 0xbb, 0x3d, 0xb8, 0xdd, 0x7c, 0x31,
	0x11, 0x2f, 0xfe, 0x79, 0xd2, 0x7f, 0x34, 0xf8, 0x59, 0x6c, 0x9b, 0xfe, 0xd1, 0xde, 0xd6, 0xe1,
	0x97, 0xc7, 0x4f, 0x4f, 0xf7, 0x4f, 0x3e, 0xb4, 0xf3, 0xe4, 0x43, 0x23, 0xe7, 0x9b, 0x4f, 0x4f,
	0xff, 0xfa, 0x45, 0x3c, 0xef, 0xdf, 0x2c, 0xd0, 0xdc, 0xcb, 0x0c, 0x07, 0xef, 0xc4, 0xd7, 0xed,
	0x9f, 0xcf, 0x88, 0x9a, 0xc1, 0xeb, 0xff, 0x40, 0x6c, 0x6c, 0xdc, 0xdf, 0xff, 0xbf, 0x57, 0xc1,
	0x94, 0x5f, 0xc5, 0x76, 0xbb, 0xbe, 0xa4, 0x75, 0x2c, 0xc2, 0x44, 0xec, 0xb6, 0xeb, 0x85, 0xd7,
	0x85, 0x02, 0x6b, 0xd1, 0xc6, 0x02, 0x8d, 0x36, 0x91, 0x55, 0xf0, 0x88, 0x79, 0x2c, 0xca, 0xad,
	0x38, 0xe8, 0xcc, 0x71, 0x3e, 0xab, 0x6e, 0xbc, 0x5b, 0x92, 0x2e, 0x3c, 0xae, 0xa4, 0xae, 0xa4,
	0x2e, 0xce, 0xd6, 0x18, 0x0b, 0xfb, 0x9b, 0x18, 0xb4, 0xeb, 0x29, 0x69, 0x5c, 0x4f, 0xc9, 0xbb,
	0x72, 0x0c, 0x19, 0x32, 0x3d, 0x1d, 0x2b, 0x6f, 0xcb, 0x78, 0x4f, 0x43, 0xf6, 0xa7, 0x60, 0xab,
	0x58, 0x88, 0xb3, 0x9e, 0xbd, 0xd7, 0x68, 0x72, 0x8e, 0x3f, 0x43, 0xb1, 0xd3, 0xae, 0x27, 0x25,
	0x59, 0x17, 0x8b, 0x71, 0x23, 0xbe, 0xeb, 0xf2, 0x56, 0x79, 0xa5, 0xde, 0xe9, 0x3c, 0x31, 0x64,
	0x6d, 0x4a, 0x3a, 0x9e, 0x4e, 0x17, 0xe2, 0x65, 0xbb, 0x3e, 0x47, 0x30, 0xee, 0x6c, 0x8d, 0x36,
	0x01, 0xc7, 0xa4, 0x78, 0x0b, 0x75, 0x4d, 0x67, 0xf7, 0x52, 0xc5, 0x02, 0x8d, 0xbb, 0x0a, 0xc6,
	0x05, 0x22, 0x0f, 0xe7, 0x5c, 0xbc, 0xe8, 0x70, 0x1a, 0x84, 0x8a, 0x87, 0x14, 0xea, 0x7f, 0x18,
	0x5f, 0xff, 0x81, 0x86, 0x13, 0x69, 0xb8, 0x46, 0x4c, 0x41, 0x33, 0x19, 0xb8, 0xa2, 0x3a, 0x1e,
	0x23, 0x14, 0xc3, 0x8d, 0xca, 0xd1, 0x30, 0x4c, 0x09, 0x39, 0x9e, 0x91, 0x92, 0x19, 0xd6, 0x6c,
	0x9c, 0x89, 0x07, 0x93, 0x5b, 0x06, 0xce, 0x5c, 0xbc, 0x6e, 0xd7, 0x09, 0x69, 0xeb, 0x8c, 0xcf,
	0x9c, 0x24, 0xbd, 0x22, 0x53, 0xb1, 0x7c, 0x4c, 0x84, 0xe8, 0x7c, 0x34, 0x52, 0xc7, 0xab, 0x46,
	0x88, 0x77, 0x0f, 0x62, 0x2d, 0xb3, 0x16, 0xa6, 0xa0, 0x2f, 0xf4, 0xd2, 0x3f, 0x62, 0x4e, 0xb1,
	0x48, 0x97, 0xe2, 0x9b, 0xae, 0x16, 0x8c, 0xcc, 0x71, 0x25, 0x5d, 0x79, 0x87, 0xf1, 0x75, 0x15,
	0x9c, 0x9b, 0x1a, 0x9b, 0x28, 0xf0, 0x96, 0xc9, 0xeb, 0x05, 0x68, 0x07, 0xcc, 0x64, 0x2d, 0xbd,
	0xa9, 0x70, 0xcd, 0x04, 0x99, 0x43, 0x9a, 0x4a, 0xc7, 0x4c, 0xd5, 0x35, 0x4d, 0x88, 0x72, 0x56,
	0xad, 0x86, 0x0e, 0x7a, 0x53, 0xb1, 0x50, 0xa6, 0xe2, 0x55, 0xef, 0x94, 0xb4, 0x52, 0x17, 0xe7,
	0xa0, 0x79, 0x46, 0x85, 0x8a, 0x1d, 0xd2, 0x83, 0xd4, 0x05, 0xa3, 0xba, 0x36, 0xb3, 0x06, 0xe8,
	0xb6, 0x29, 0x37, 0xa0, 0x6a, 0xa9, 0x0b, 0x26, 0x58, 0xe7, 0xd8, 0xa2, 0x34, 0xbe, 0x28, 0x18,
	0x60, 0xa1, 0xa7, 0x4e, 0xc1, 0x5a, 0x28, 0x78, 0x6a, 0x1b, 0x7a, 0xea, 0x0a, 0x54, 0xc5, 0x8b,
	0x56, 0x00, 0x9a, 0x7b, 0xad, 0x79, 0x40, 0x81, 0xe2, 0x23, 0xd0, 0x19, 0x1a, 0xa6, 0x35, 0x53,
	0xd0, 0x2d, 0x0e, 0x3f, 0xd4, 0x01, 0x65, 0x45, 0x35, 0x72, 0x8b, 0x65, 0x0e, 0x52, 0xa7, 0xf4,
	0xc0, 0x95, 0xa2, 0x4a, 0xb2, 0xa3, 0x33, 0x21, 0xf5, 0xfb, 0x67, 0x49, 0xfa, 0xc2, 0x1b, 0x26,
	0xd0, 0x46, 0xf3, 0xc1, 0x56, 0xe8, 0x52, 0x50, 0x8a, 0xdf, 0xf9, 0x87, 0x92, 0xc9, 0xe8, 0x4d,
	0x63, 0x24, 0xa9, 0xdd, 0x6d, 0x73, 0xca, 0x64, 0xd0, 0x9d, 0x57, 0x19, 0xe8, 0x05, 0x28, 0xef,
	0xb8, 0x03, 0xfe, 0x14, 0x1d, 0x28, 0x66, 0xca, 0x92, 0x36, 0xc6, 0xd8, 0x6a, 0x2d, 0x33, 0x3c,
	0xcb, 0xd2, 0xd7, 0xa9, 0xf5, 0x0d, 0x73, 0x6e, 0x5d, 0xc1, 0x3d, 0x32, 0x21, 0x12, 0x05, 0x0d,
	0xb3, 0x25, 0xb6, 0x2d, 0x08, 0xf3, 0x36, 0x2a, 0x96, 0x69, 0xcc, 0xcc, 0xc0, 0x9a, 0x39, 0x87,
	0x8f, 0xa8, 0xe0, 0x46, 0x04, 0xdc, 0x29, 0xd3, 0x88, 0x99, 0x2c, 0x98, 0x35, 0x7d, 0x0e, 0x2e,
	0x2b, 0xa5, 0x2e, 0x92, 0x52, 0x66, 0x15, 0x57, 0xf5, 0x34, 0xc4, 0xcf, 0x82, 0x01, 0x63, 0x08,
	0x19, 0x71, 0x37, 0x38, 0x33, 0xf9, 0xfe, 0x3d, 0x30, 0x93, 0xb3, 0x84, 0x8c, 0x98, 0xad, 0x64,
	0xe8, 0x8d, 0x91, 0x8e, 0x98, 0xce, 0xcc, 0x81, 0xd1, 0xd4, 0x82, 0x0a, 0x8c, 0xc8, 0x17, 0xa5,
	0xf6, 0x8e, 0xa9, 0xd9, 0x49, 0x09, 0x75, 0x03, 0x85, 0x46, 0x26, 0xe7, 0x96, 0x86, 0x1a, 0x99,
	0x81, 0x1a, 0x19, 0xa9, 0x2b, 0x66, 0x9e, 0x86, 0x18, 0xdf, 0x68, 0x83, 0xf6, 0x2f, 0x7d, 0x9d,
	0x2a, 0x34, 0x13, 0x05, 0xf1, 0xfb, 0xab, 0x10, 0xe8, 0x15, 0x19, 0x95, 0x4f, 0xe3, 0x85, 0x6e,
	0xd3, 0x68, 0x11, 0xb2, 0xf2, 0xb6, 0x4e, 0x0d, 0x2a, 0x05, 0xdc, 0x31, 0x94, 0xbc, 0x76, 0x20,
	0xf5, 0x42, 0xc7, 0x4f, 0x35, 0x81, 0xd0, 0x09, 0xd4, 0x0d, 0x63, 0x58, 0xbb, 0x12, 0xdf, 0xf6,
	0x87, 0x8e, 0x08, 0xf5, 0x15, 0x65, 0x54, 0x93, 0x93, 0xf1, 0x6d, 0x25, 0xa0, 0x8d, 0x95, 0x2c,
	0x4a, 0x37, 0xc2, 0x06, 0x8c, 0xf3, 0x06, 0xb9, 0x3b, 0x37, 0xca, 0x2a, 0x74, 0x5c, 0x19, 0x74,
	0x60, 0xa2, 0x85, 0x7d, 0x26, 0xbe, 0x0f, 0x07, 0xc5, 0x43, 0x2c, 0xa5, 0xce, 0x17, 0x35, 0x28,
	0x95, 0x28, 0xf2, 0x39, 0x93, 0x53, 0x1d, 0x46, 0xbb, 0x61, 0x6f, 0x27, 0x5c, 0x66, 0xd1, 0x8d,
	0x65, 0x7c, 0xa4, 0x03, 0x2d, 0x2f, 0x21, 0xab, 0x6e, 0xae, 0x40, 0x3b, 0x34, 0xdc, 0x91, 0x7d,
	0x08, 0x4a, 0x11, 0x69, 0xb6, 0xe0, 0xe7, 0xec, 0xc3, 0x03, 0x43, 0x4d, 0xc9, 0x3d, 0x3c, 0xb8,
	0x68, 0x4a, 0xd2, 0xdc, 0x19, 0x74, 0x06, 0x45, 0xbc, 0x2c, 0x86, 0xd9, 0x62, 0x0c, 0x8f, 0x5c,
	0x6d, 0xf6, 0x2a, 0xfd, 0x1c, 0x57, 0x09, 0x2d, 0x6b, 0x57, 0x52, 0x17, 0xdc, 0xd3, 0xaf, 0xc4,
	0xac, 0xad, 0x03, 0xd5, 0xf2, 0x85, 0xa9, 0xf3, 0xb7, 0x3a, 0x47, 0x03, 0x05, 0x32, 0x0d, 0xba,
	0x68, 0xe9, 0x6f, 0x28, 0x85, 0x78, 0x51, 0x0d, 0xc9, 0x7a, 0xfb, 0xe6, 0x0d, 0x57, 0x1f, 0x4a,
	0xcc, 0x2a, 0x34, 0x98, 0x8f, 0x15, 0x70, 0x87, 0xca, 0xee, 0x5e, 0x02, 0xf3, 0xc5, 0x03, 0x99,
	0xf8, 0x51, 0x3d, 0x6c, 0x85, 0xc6, 0x8a, 0x9a, 0x66, 0x3d, 0x92, 0xf1, 0xf7, 0x37, 0x63, 0xb1,
	0x1d, 0xee, 0x16, 0x07, 0x07, 0x1f, 0x7f, 0xf6, 0xf1, 0x25, 0xe4, 0xfe, 0x0f, 0x9f, 0x78, 0xdb,
	0xe3, 0xa4, 0x5f, 0x75, 0xb7, 0xa5, 0x3f, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x1f, 0xb8, 0xec,
	0xc6, 0x43, 0x1d, 0x00, 0x00,
}
